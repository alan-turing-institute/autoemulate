[tool.poetry]
name = "autoemulate"
version = "1.0.0"
description = "A python package for semi-automated emulation"
license = "MIT"
authors = ["AutoEmulate contributors (see our GitHub page)"]
readme = "README.md"
include = ["misc/AE_logo_final.png"]

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
mogp-emulator = "^0.7.2"
matplotlib = "^3.7.2"
seaborn = "^0.12.2"
scikit-learn = ">=1.3.0,<1.6.0"
pandas = "^2.1"
torch = "^2.1.0"
skorch = "^0.15.0"
scipy = "^1.11.3"
numpy = "^1.24"
joblib = "^1.3.2"
tqdm = "^4.66.2"
iprogress = "^0.4"
lightgbm = "^4.3.0"
ipywidgets = "^8.1.2"
gpytorch = "^1.12"
salib = "^1.5.1"
torcheval = "^0.0.7"
anytree = "^2.12.1"
torchmetrics = "^1.7.1"
pyro-ppl = "^1.9.1"
corner = "^2.2.3"
torchrbf = "^0.0.1"
arviz = "^0.21.0"

[tool.poetry.group.dev.dependencies]
ipykernel = "^6.25.0"
pytest = "^7.4.0"
sphinx = "^7.2.6"
myst-parser = "^2.0.0"
furo = "^2023.9.10"
sphinx-copybutton = "^0.5.2"
sphinx-autodoc-typehints = "^1.24.0"
black = "^23.10.1"
pre-commit = "^3.5.0"
jupyter-book = "^1.0.0"
pytest-cov = "^4.1.0"
coverage = "^7.6.4"
plotnine = "^0.13.6"
pyright = "^1.1.398"


[tool.poetry.extras]
docs = ["furo", "sphinx-copybutton", "sphinx-autodoc-typehints"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
relative_files = true
source = [".", "/tmp"]

[tool.pytest.ini_options]
addopts = "--ignore=v0"

[tool.pyright]
venvPath = "."
venv = ".venv"
include = ["autoemulate/*", "tests/*", "benchmarks/*"]

[tool.ruff]
src = ["autoemulate/"]
line-length = 88
include = ["autoemulate/**/*.py", "tests/**/*.py", "benchmarks/**/*.py"]
target-version = "py310"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "D",   # docstring conventions
    "E",
    "F",
    "W",   # flake8
    "B",   # flake8-bugbear
    "I",   # isort
    "ARG", # flake8-unused-arguments
    "C4",  # flake8-comprehensions
    "EM",  # flake8-errmsg
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "G",   # flake8-logging-format
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "RUF", # Ruff-specific
    "SIM", # flake8-simplify
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "EXE", # flake8-executable
]

ignore = [
    "PLR2004", # Magic value used in comparison
    "EM102",   #Â Exception must not use an f-string literal, assign to variable first
    "ISC001",  # Conflicts with formatter
    # "D417",    # Missing trailing new line in docstring
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
]

unfixable = [
    "F401", # Would remove unused imports
    "F841", # Would remove unused variables
]
flake8-unused-arguments.ignore-variadic-names = true # allow unused *args/**kwargs

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["D"]